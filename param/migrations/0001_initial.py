# Generated by Django 4.1.3 on 2023-08-28 18:51

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="CustomUser",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        error_messages={
                            "unique": "A user with that username already exists."
                        },
                        help_text="Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
                        max_length=150,
                        unique=True,
                        validators=[
                            django.contrib.auth.validators.UnicodeUsernameValidator()
                        ],
                        verbose_name="username",
                    ),
                ),
                (
                    "first_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="first name"
                    ),
                ),
                (
                    "last_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="last name"
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        blank=True, max_length=254, verbose_name="email address"
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="date joined"
                    ),
                ),
                (
                    "date_of_birth",
                    models.DateField(null=True, verbose_name="Date de naissance"),
                ),
                ("address", models.TextField(null=True, verbose_name="Adresse")),
                (
                    "phone_number",
                    models.CharField(
                        max_length=255, null=True, verbose_name="Numéro de téléphone"
                    ),
                ),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "verbose_name": "user",
                "verbose_name_plural": "users",
                "abstract": False,
            },
            managers=[
                ("objects", django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name="CandidateCV",
            fields=[
                ("cv_id", models.AutoField(primary_key=True, serialize=False)),
                ("address", models.TextField(null=True, verbose_name="Adresse")),
                (
                    "phone_number",
                    models.CharField(
                        max_length=255, null=True, verbose_name="Numéro de téléphone"
                    ),
                ),
                ("projects", models.TextField(null=True, verbose_name="Projets")),
                ("languages", models.TextField(null=True, verbose_name="Langues")),
                ("summary", models.TextField(null=True, verbose_name="Résumé")),
            ],
        ),
        migrations.CreateModel(
            name="Company",
            fields=[
                ("company_id", models.AutoField(primary_key=True, serialize=False)),
                (
                    "company_name",
                    models.CharField(max_length=255, verbose_name="Nom d'entreprise"),
                ),
            ],
        ),
        migrations.CreateModel(
            name="CompanySubscription",
            fields=[
                (
                    "subscription_id",
                    models.AutoField(primary_key=True, serialize=False),
                ),
                (
                    "subscription_type",
                    models.CharField(max_length=255, verbose_name="Type d'abonnement"),
                ),
                ("start_date", models.DateField(verbose_name="Date de début")),
                ("end_date", models.DateField(null=True, verbose_name="Date de fin")),
                (
                    "company",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="param.company",
                        verbose_name="Entreprise",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Job",
            fields=[
                ("job_id", models.AutoField(primary_key=True, serialize=False)),
                (
                    "job_title",
                    models.CharField(max_length=255, verbose_name="Titre d'emploi"),
                ),
                ("description", models.TextField(verbose_name="Description")),
                (
                    "company",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="param.company",
                        verbose_name="Entreprise",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Skill",
            fields=[
                ("skill_id", models.AutoField(primary_key=True, serialize=False)),
                (
                    "skill_name",
                    models.CharField(max_length=255, verbose_name="Nom de compétence"),
                ),
            ],
        ),
        migrations.CreateModel(
            name="SkillTest",
            fields=[
                ("test_id", models.AutoField(primary_key=True, serialize=False)),
                (
                    "skill",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="param.skill",
                        verbose_name="Compétence",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Candidate",
            fields=[
                (
                    "user",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        primary_key=True,
                        serialize=False,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "full_name",
                    models.CharField(max_length=255, verbose_name="Nom complet"),
                ),
                (
                    "date_of_birth",
                    models.DateField(null=True, verbose_name="Date de naissance"),
                ),
                ("email", models.EmailField(max_length=254, unique=True)),
                ("password_hash", models.CharField(max_length=255)),
            ],
        ),
        migrations.CreateModel(
            name="TestQuestion",
            fields=[
                ("question_id", models.AutoField(primary_key=True, serialize=False)),
                ("question_text", models.TextField(verbose_name="question")),
                (
                    "correct_answer",
                    models.CharField(max_length=255, verbose_name="Réponse correcte"),
                ),
                (
                    "test",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="param.skilltest",
                        verbose_name="Test",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="RequiredSkill",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "job",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="param.job",
                        verbose_name="Emploi",
                    ),
                ),
                (
                    "skill",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="param.skill",
                        verbose_name="Compétence",
                    ),
                ),
            ],
            options={
                "verbose_name": "Compétence requise pour l'emploi",
                "verbose_name_plural": "Compétences requises pour les emplois",
            },
        ),
        migrations.CreateModel(
            name="PaymentTransaction",
            fields=[
                ("transaction_id", models.AutoField(primary_key=True, serialize=False)),
                (
                    "payment_amount",
                    models.DecimalField(
                        decimal_places=2,
                        max_digits=10,
                        verbose_name="Montant du paiement",
                    ),
                ),
                ("payment_date", models.DateField(verbose_name="Date de paiement")),
                (
                    "payment_status",
                    models.CharField(
                        choices=[
                            ("Paid", "Paid"),
                            ("Pending", "Pending"),
                            ("Failed", "Failed"),
                        ],
                        max_length=255,
                        verbose_name="Statut de paiement",
                    ),
                ),
                (
                    "subscription",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="param.companysubscription",
                        verbose_name="Abonnement",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="CVExperience",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("position", models.CharField(max_length=255, verbose_name="Poste")),
                (
                    "company",
                    models.CharField(max_length=255, verbose_name="Entreprise"),
                ),
                ("start_date", models.DateField(verbose_name="Date de début")),
                ("end_date", models.DateField(null=True, verbose_name="Date de fin")),
                ("description", models.TextField(verbose_name="Description")),
                (
                    "cv",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="param.candidatecv",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="CVEducation",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "institution",
                    models.CharField(max_length=255, verbose_name="Institution"),
                ),
                ("degree", models.CharField(max_length=255, verbose_name="Diplôme")),
                ("start_date", models.DateField(verbose_name="Date de début")),
                ("end_date", models.DateField(null=True, verbose_name="Date de fin")),
                (
                    "cv",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="param.candidatecv",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="CandidateSkill",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "skill",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="param.skill",
                        verbose_name="Compétence",
                    ),
                ),
            ],
            options={
                "verbose_name": "Compétence du candidat",
            },
        ),
        migrations.CreateModel(
            name="CandidateRanking",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("ranking", models.IntegerField(verbose_name="Classement")),
                (
                    "skill",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="param.skill",
                        verbose_name="Compétence",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="CandidateApplication",
            fields=[
                ("application_id", models.AutoField(primary_key=True, serialize=False)),
                (
                    "application_date",
                    models.DateTimeField(
                        auto_now_add=True, verbose_name="Date de candidature"
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("Submitted", "Submitted"),
                            ("Reviewed", "Reviewed"),
                            ("Accepted", "Accepted"),
                            ("Rejected", "Rejected"),
                        ],
                        max_length=255,
                        verbose_name="Statut",
                    ),
                ),
                (
                    "job",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="param.job",
                        verbose_name="Emploi",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="TestSubmission",
            fields=[
                ("submission_id", models.AutoField(primary_key=True, serialize=False)),
                ("submission_timestamp", models.DateTimeField(auto_now_add=True)),
                ("score", models.DecimalField(decimal_places=2, max_digits=5)),
                ("ranking", models.IntegerField(verbose_name="Classement")),
                (
                    "test",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="param.skilltest",
                    ),
                ),
                (
                    "candidate",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="param.candidate",
                        verbose_name="Candidat",
                    ),
                ),
            ],
        ),
        migrations.AddConstraint(
            model_name="requiredskill",
            constraint=models.UniqueConstraint(
                fields=("job", "skill"), name="unique_job_skill"
            ),
        ),
        migrations.AddField(
            model_name="candidateskill",
            name="candidate",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                to="param.candidate",
                verbose_name="Candidat",
            ),
        ),
        migrations.AddField(
            model_name="candidateranking",
            name="candidate",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                to="param.candidate",
                verbose_name="Candidat",
            ),
        ),
        migrations.AddField(
            model_name="candidatecv",
            name="candidate",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                to="param.candidate",
                verbose_name="Candidat",
            ),
        ),
        migrations.AddField(
            model_name="candidateapplication",
            name="candidate",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                to="param.candidate",
                verbose_name="Candidat",
            ),
        ),
        migrations.AddConstraint(
            model_name="candidateskill",
            constraint=models.UniqueConstraint(
                fields=("candidate", "skill"), name="unique_candidate_skill"
            ),
        ),
    ]
